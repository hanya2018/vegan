
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### vegan-tests: unit tests for vegan functions
> 
> ### This file contains unit tests for vegan functions. This file is
> ### run in R CMD check and its results are compared against previously
> ### saved results in vegan-tests.Rout.save. If you change tests, you
> ### must generate new vegan-tests.Rout.save in this directory.
> 
> ### The current plan is that tests/ are not included in the CRAN
> ### release, but only in the development versin of vegan in R-Forge.
> 
> ### The tests here are not intended for human reading. The tests need
> ### not be ecological or biologically meaningful, but they are only
> ### intended for testing strange arguments, protect against
> ### regressions and test correctness of results.
> 
> ### The tests are in a single file and you should clean work space
> ### after the unit test. You should set random number seed (if needed)
> ### for comparison against vegan-tests.Rout.save, and you should
> ### remove the seed after the unit test. If possible, avoid very long
> ### lasting tests.
> 
> ###<--- BEGIN TESTS --->
> suppressPackageStartupMessages(require(vegan))
> ###<--- BEGIN anova.cca test --->
> ### anova.cca tests: should work with (1) subset, (2) missing values,
> ### (3) with functions of variables poly(A1,2), (4) variables in data
> ### frame attached or in data=, or (5) in working environment
> set.seed(4711)
> data(dune)
> data(dune.env)
> df <- dune.env
> df$Management[c(1,5)] <- NA
> ## formula
> fla <- as.formula("dune ~ Management + poly(A1, 2) + spno")
> ### variable in the .GlobalEnv
> spno <- specnumber(dune)
> ### data= argument
> ## cca/rda
> m <-  cca(fla, data=df,  na.action=na.exclude,  subset = Use != "Pasture" & spno > 7)
> anova(m, perm=100)
Permutation test for cca under reduced model

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df  Chisq      F N.Perm Pr(>F)  
Model     6 1.3178 1.3341     99   0.07 .
Residual  4 0.6585                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(m, by="term", perm=100)
Permutation test for cca under reduced model
Terms added sequentially (first to last)

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df  Chisq      F N.Perm Pr(>F)  
Management   3 0.8039 1.6277     99   0.04 *
poly(A1, 2)  2 0.3581 1.0877     99   0.37  
spno         1 0.1558 0.9461     99   0.40  
Residual     4 0.6585                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(m, by="margin", perm=100)
Permutation test for cca under reduced model
Marginal effects of terms

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df  Chisq      F N.Perm Pr(>F)
Management   3 0.6151 1.2454     99   0.31
poly(A1, 2)  2 0.3514 1.0673     99   0.46
spno         1 0.1558 0.9461     99   0.58
Residual     4 0.6585                     
> anova(m, by="axis", perm=100)
Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df,      na.action = na.exclude, subset = structure(c(TRUE, TRUE,      TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE,      FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE), .Names = c("2",      "13", "4", "16", "6", "1", "8", "5", "17", "15", "10", "11",      "9", "18", "3", "20", "14", "19", "12", "7")))
         Df  Chisq      F N.Perm Pr(>F)  
CCA1      1 0.4683 2.8448     99   0.05 *
CCA2      1 0.3339 2.0280     99   0.18  
CCA3      1 0.1983 1.2044     99   0.36  
CCA4      1 0.1457 0.8852     99   0.56  
CCA5      1 0.1035 0.6284     99   0.82  
CCA6      1 0.0681 0.4139     99   0.83  
Residual  4 0.6585                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> ## capscale
> p <- capscale(fla, data=df, na.action=na.exclude, subset = Use != "Pasture" & spno > 7)
> anova(p, perm=100)
Permutation test for capscale under reduced model

Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df    Var      F N.Perm Pr(>F)   
Model     6 64.324 1.9652     99   0.01 **
Residual  4 21.821                        
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(p, by="term", perm=100)
Permutation test for capscale under reduced model
Terms added sequentially (first to last)

Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df    Var      F N.Perm Pr(>F)   
Management   3 45.520 2.7814     99   0.01 **
poly(A1, 2)  2 11.342 1.0395     99   0.37   
spno         1  7.462 1.3679     99   0.19   
Residual     4 21.821                        
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(p, by="margin", perm=100)
Permutation test for capscale under reduced model
Marginal effects of terms

Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df    Var      F N.Perm Pr(>F)  
Management   3 34.092 2.0831     99   0.03 *
poly(A1, 2)  2 10.861 0.9954     99   0.51  
spno         1  7.462 1.3679     99   0.31  
Residual     4 21.821                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(p, by="axis", perm=100)
Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df,      na.action = na.exclude, subset = structure(c(TRUE, TRUE,      TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE,      FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE), .Names = c("2",      "13", "4", "16", "6", "1", "8", "5", "17", "15", "10", "11",      "9", "18", "3", "20", "14", "19", "12", "7")))
         Df     Var      F N.Perm Pr(>F)  
CAP1      1 26.7105 4.8962     99   0.02 *
CAP2      1 17.1633 3.1462     99   0.04 *
CAP3      1  7.7026 1.4119     99   0.31  
CAP4      1  5.9442 1.0896     99   0.50  
CAP5      1  4.0224 0.7373     99   0.59  
CAP6      1  2.7811 0.5098     99   0.87  
Residual  4 21.8213                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> ## see that capscale can be updated and also works with 'dist' input
> dis <- vegdist(dune)
> p <- update(p, dis ~ .)
> anova(p, perm=100)
Permutation test for capscale under reduced model

Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df     Var      F N.Perm Pr(>F)  
Model     6 1.55041 1.9024     99   0.06 .
Residual  4 0.54333                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(p, by="term", perm=100)
Permutation test for capscale under reduced model
Terms added sequentially (first to last)

Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df     Var      F N.Perm Pr(>F)  
Management   3 1.04714 2.5697     99   0.02 *
poly(A1, 2)  2 0.29810 1.0973     99   0.44  
spno         1 0.20517 1.5105     99   0.21  
Residual     4 0.54333                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(p, by="margin", perm=100)
Permutation test for capscale under reduced model
Marginal effects of terms

Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
            Df     Var      F N.Perm Pr(>F)
Management   3 0.70723 1.7356     99   0.15
poly(A1, 2)  2 0.27558 1.0144     99   0.44
spno         1 0.20517 1.5105     99   0.29
Residual     4 0.54333                     
> anova(p, by="axis", perm=100)
Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df,      na.action = na.exclude, subset = structure(c(TRUE, TRUE,      TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE,      FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE), .Names = c("2",      "13", "4", "16", "6", "1", "8", "5", "17", "15", "10", "11",      "9", "18", "3", "20", "14", "19", "12", "7")))
         Df     Var      F N.Perm Pr(>F)  
CAP1      1 0.70878 5.2181     99   0.03 *
CAP2      1 0.54318 3.9989     99   0.07 .
CAP3      1 0.11673 0.8594     99   0.53  
CAP4      1 0.09299 0.6846     99   0.59  
CAP5      1 0.06416 0.4723     99   0.84  
CAP6      1 0.02458 0.1810     99   0.98  
Residual  4 0.54333                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> ### attach()ed data frame instead of data=
> attach(df)
> q <- cca(fla, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
> anova(q, perm=100)
Permutation test for cca under reduced model

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
         Df  Chisq      F N.Perm Pr(>F)
Model     6 1.3178 1.3341     99   0.17
Residual  4 0.6585                     
> anova(q, by="term", perm=100)
Permutation test for cca under reduced model
Terms added sequentially (first to last)

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
            Df  Chisq      F N.Perm Pr(>F)  
Management   3 0.8039 1.6277     99   0.03 *
poly(A1, 2)  2 0.3581 1.0877     99   0.36  
spno         1 0.1558 0.9461     99   0.43  
Residual     4 0.6585                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> anova(q, by="margin", perm=100)
Permutation test for cca under reduced model
Marginal effects of terms

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
            Df  Chisq      F N.Perm Pr(>F)
Management   3 0.6151 1.2454     99   0.35
poly(A1, 2)  2 0.3514 1.0673     99   0.44
spno         1 0.1558 0.9461     99   0.51
Residual     4 0.6585                     
> anova(q, by="axis", perm=100)
Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit,      subset = structure(c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE,      FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE,      TRUE, FALSE, TRUE, TRUE, FALSE), .Names = c("2", "13", "4",      "16", "6", "1", "8", "5", "17", "15", "10", "11", "9", "18",      "3", "20", "14", "19", "12", "7")))
         Df  Chisq      F N.Perm Pr(>F)  
CCA1      1 0.4683 2.8448     99   0.07 .
CCA2      1 0.3339 2.0280     99   0.11  
CCA3      1 0.1983 1.2044     99   0.25  
CCA4      1 0.1457 0.8852     99   0.50  
CCA5      1 0.1035 0.6284     99   0.59  
CCA6      1 0.0681 0.4139     99   0.75  
Residual  4 0.6585                       
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> ### Check that constrained ordination functions can be embedded.
> ### The data.frame 'df' is still attach()ed.
> foo <- function(bar, Y, X, ...)
+ {
+     bar <- match.fun(bar)
+     bar(Y ~ X, ...)
+ }
> foo("cca", dune, Management, na.action = na.omit)
Call: cca(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total          2.1037     1.0000     
Constrained    0.5887     0.2798    3
Unconstrained  1.5150     0.7202   14
Inertia is mean squared contingency coefficient 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
   CCA1    CCA2    CCA3 
0.33273 0.17481 0.08118 

Eigenvalues for unconstrained axes:
     CA1      CA2      CA3      CA4      CA5      CA6      CA7      CA8 
0.459535 0.216846 0.174562 0.140934 0.115518 0.086518 0.077818 0.066855 
     CA9     CA10     CA11     CA12     CA13     CA14 
0.053171 0.043102 0.035635 0.026482 0.012864 0.005163 

> foo("rda", dune, Management, na.action = na.omit)
Call: rda(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total         81.8333     1.0000     
Constrained   28.0931     0.3433    3
Unconstrained 53.7402     0.6567   14
Inertia is variance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3 
15.661  9.697  2.736 

Eigenvalues for unconstrained axes:
    PC1     PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9    PC10 
16.2669  8.1255  6.3186  5.1808  3.6647  3.4383  2.6543  2.3589  1.8917  1.4150 
   PC11    PC12    PC13    PC14 
 0.9926  0.6646  0.4185  0.3497 

> foo("capscale", dune, Management, dist="jaccard", na.action = na.omit)
Call: bar(formula = Y ~ X, distance = "jaccard", na.action = ..2)

              Inertia Proportion Rank
Total          5.2931     1.0000     
Constrained    1.5460     0.2921    3
Unconstrained  3.7471     0.7079   14
Inertia is squared Jaccard distance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  CAP1   CAP2   CAP3 
0.8856 0.4712 0.1893 

Eigenvalues for unconstrained axes:
   MDS1    MDS2    MDS3    MDS4    MDS5    MDS6    MDS7    MDS8    MDS9   MDS10 
1.16466 0.54261 0.44747 0.33940 0.29449 0.20622 0.17594 0.15306 0.11676 0.08854 
  MDS11   MDS12   MDS13   MDS14 
0.08756 0.07427 0.04752 0.00856 

> foo("capscale", vegdist(dune), Management, na.action = na.omit)
Call: bar(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total          3.9491                
Real Total     4.1689     1.0000     
Constrained    1.3488     0.3235    3
Unconstrained  2.8201     0.6765   12
Imaginary     -0.2198               5
Inertia is squared Bray distance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  CAP1   CAP2   CAP3 
0.8665 0.3747 0.1076 

Eigenvalues for unconstrained axes:
    MDS1     MDS2     MDS3     MDS4     MDS5     MDS6     MDS7     MDS8 
1.250893 0.480810 0.371480 0.235202 0.161136 0.096709 0.071414 0.068872 
    MDS9    MDS10    MDS11    MDS12 
0.036576 0.029876 0.013495 0.003631 

> ### FIXME: foo("capscale", dune, Management, data=dune.env) fails!
> ###
> detach(df)
> ### Check that statistics match in partial constrained ordination
> m <- cca(dune ~ A1 + Moisture + Condition(Management), dune.env, subset = A1 > 3)
> tab <- anova(m, by = "axis", perm.max = 100)
> m
Call: cca(formula = dune ~ A1 + Moisture + Condition(Management), data
= dune.env, subset = A1 > 3)

              Inertia Proportion Rank
Total          2.0976     1.0000     
Conditional    0.6251     0.2980    3
Constrained    0.5555     0.2648    4
Unconstrained  0.9170     0.4372   10
Inertia is mean squared contingency coefficient 

Eigenvalues for constrained axes:
   CCA1    CCA2    CCA3    CCA4 
0.27109 0.14057 0.08761 0.05624 

Eigenvalues for unconstrained axes:
    CA1     CA2     CA3     CA4     CA5     CA6     CA7     CA8     CA9    CA10 
0.31042 0.13634 0.11974 0.09408 0.07763 0.06425 0.04449 0.02925 0.02785 0.01299 

> tab
Model: cca(formula = dune ~ A1 + Moisture + Condition(Management), data = dune.env,      subset = c(TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE,      TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,      TRUE, FALSE))
         Df  Chisq      F N.Perm Pr(>F)   
CCA1      1 0.2711 2.9561     99   0.01 **
CCA2      1 0.1406 1.5329     99   0.05 * 
CCA3      1 0.0876 0.9553     99   0.42   
CCA4      1 0.0562 0.6132     99   0.75   
Residual 10 0.9170                        
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> all.equal(tab[,2], c(m$CCA$eig, m$CA$tot.chi), check.attributes=FALSE)
[1] TRUE
> tab[nrow(tab),1] == m$CA$rank
[1] TRUE
> ## clean-up
> rm(df, spno, fla, m, p, q, tab, dis, foo, .Random.seed)
> ### <--- END anova.cca test --->
> 
> ### Sven Neulinger <sneulinger@ifam.uni-kiel.de> reported failures in
> ### partial analysis which (mostly) were fixed in r2087. Below his test.
> 
> set.seed(4711)
> X <- matrix(rnorm(30*6), 30, 6)
> 
> A <- factor(rep(rep(c("a","b"), each=3),5))
> B <- factor(rep(c("a","b","c"), 10))
> ## Sven Neulinger's tests used 'C' below, but that fails still now due
> ## to look-up order: function stats::C was found before matrix 'C'
> CC <- factor(rep(c(1:5), each=6))
> 
> # partial db-RDA
> cap.model.cond <- capscale(X ~ A + B + Condition(CC))
> anova(cap.model.cond, by="axis", strata=CC)  # -> error pre r2287
Model: capscale(formula = X ~ A + B + Condition(CC))
         Df    Var      F N.Perm Pr(>F)
CAP1      1 0.2682 1.3075     99   0.29
CAP2      1 0.0685 0.3339     99   0.91
CAP3      1 0.0455 0.2217     99   0.97
Residual 22 4.5130                     
> anova(cap.model.cond, by="terms", strata=CC)  # -> error pre r2287
Permutation test for capscale under reduced model
Terms added sequentially (first to last)
Permutations stratified within 'CC'

Model: capscale(formula = X ~ A + B + Condition(CC))
         Df    Var      F N.Perm Pr(>F)
A         1 0.1316 0.6415     99   0.72
B         2 0.2506 0.6108     99   0.84
Residual 22 4.5130                     
> 
> # db-RDA without conditional factor
> cap.model <- capscale(X ~ A + B)
> anova(cap.model, by="axis", strata=CC)  # -> no error
Model: capscale(formula = X ~ A + B)
         Df    Var      F N.Perm Pr(>F)
CAP1      1 0.2682 1.3267     99   0.18
CAP2      1 0.0685 0.3388     99   0.96
CAP3      1 0.0455 0.2249     99   0.95
Residual 26 5.2565                     
> anova(cap.model, by="terms", strata=CC)  # -> no error
Permutation test for capscale under reduced model
Terms added sequentially (first to last)
Permutations stratified within 'CC'

Model: capscale(formula = X ~ A + B)
         Df    Var      F N.Perm Pr(>F)
A         1 0.1316 0.6509     99   0.62
B         2 0.2506 0.6198     99   0.85
Residual 26 5.2565                     
> 
> # partial RDA
> rda.model.cond <- rda(X ~ A + B + Condition(CC))
> anova(rda.model.cond, by="axis", strata=CC)  # -> no error
Model: rda(formula = X ~ A + B + Condition(CC))
         Df    Var      F N.Perm Pr(>F)
RDA1      1 0.2682 1.3075     99   0.28
RDA2      1 0.0685 0.3339     99   0.92
RDA3      1 0.0455 0.2217     99   0.97
Residual 22 4.5130                     
> anova(rda.model.cond, by="terms", strata=CC)  # -> error pre r2287
Permutation test for rda under reduced model
Terms added sequentially (first to last)
Permutations stratified within 'CC'

Model: rda(formula = X ~ A + B + Condition(CC))
         Df    Var      F N.Perm Pr(>F)
A         1 0.1316 0.6415     99   0.65
B         2 0.2506 0.6108     99   0.84
Residual 22 4.5130                     
> 
> # RDA without conditional factor
> rda.model <- rda(X ~ A + B)
> anova(rda.model, by="axis", strata=CC)  # -> no error
Model: rda(formula = X ~ A + B)
         Df    Var      F N.Perm Pr(>F)
RDA1      1 0.2682 1.3267     99   0.24
RDA2      1 0.0685 0.3388     99   0.90
RDA3      1 0.0455 0.2249     99   0.94
Residual 26 5.2565                     
> anova(rda.model, by="terms", strata=CC)  # -> no error
Permutation test for rda under reduced model
Terms added sequentially (first to last)
Permutations stratified within 'CC'

Model: rda(formula = X ~ A + B)
         Df    Var      F N.Perm Pr(>F)
A         1 0.1316 0.6509     99   0.69
B         2 0.2506 0.6198     99   0.84
Residual 26 5.2565                     
> ## clean.up
> rm(X, A, B, CC, cap.model.cond, cap.model, rda.model.cond, rda.model)
> ### end Sven Neulinger's tests
> 
> 
> ### nestednodf: test case by Daniel Spitale in a comment to News on
> ### the release of vegan 1.17-6 in vegan.r-forge.r-project.org.
> x <- c(1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0)
> m1 <- matrix(x, nrow=5, ncol=5, byrow=FALSE)# as in Fig 2 Almeida-Neto et al 2008.
> (nodf1 <- nestednodf(m1, order = FALSE, weighted = FALSE))
N columns  : 53.33333 
N rows     : 63.33333 
NODF       : 58.33333 
Matrix fill: 0.56 
> ## Now the same matrix but with abundance data
> x <- c(5,0,2,1,1,4,1,1,0,0,0,7,1,1,0,3,1,0,0,0,9,1,0,0,0)
> m <- matrix(x, nrow=5, ncol=5, byrow=FALSE)
> (nodfq <- nestednodf(m, order = FALSE, weighted = FALSE))
N columns  : 53.33333 
N rows     : 63.33333 
NODF       : 58.33333 
Matrix fill: 0.56 
> identical(nodf1, nodfq)
[1] TRUE
> rm(x, m, m1, nodfq, nodf1)
> ### end nestednodf
> 
> proc.time()
   user  system elapsed 
  8.594   0.128   8.695 
