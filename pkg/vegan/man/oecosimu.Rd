\encoding{UTF-8}
\name{oecosimu}
\alias{oecosimu}
\alias{as.ts.oecosimu}
\alias{as.mcmc.oecosimu}
\alias{density.oecosimu}
\alias{densityplot.oecosimu}

\title{Evaluate Statistics with Null Models of Biological Communities }

\description{
  Null models generate random communities with different criteria to
  study the significance of nestedness or other community patterns. The
  function only simulates binary (presence/absence) models with
  constraint for total number of presences, and optionally for numbers
  of species and/or species frequencies.
}

\usage{
oecosimu(comm, nestfun, method, nsimul = 99, burnin = 0, thin = 1,
   statistic = "statistic", alternative = c("two.sided", "less", "greater"),
   ...)
\method{as.ts}{oecosimu}(x, ...)
\method{as.mcmc}{oecosimu}(x)
\method{density}{oecosimu}(x, ...)
\method{densityplot}{oecosimu}(x, data, xlab = "Simulated", ...)
}

\arguments{
  \item{comm}{Community data, or a Null model object generated by
    \code{\link{nullmodel}} or an object of class \code{simmat} (array
    of permuted matrices from \code{\link{simulate.nullmodel}}). If
    \code{comm} is a community data, null model simulation
    \code{method} must be specified.  If \code{comm} is a
    \code{\link{nullmodel}}, the simulation \code{method} is ignored,
    and if \code{comm} is a \code{simmat} object, all other arguments
    are ignored except \code{nestfun}, \code{statistic} and
    \code{alternative}.}
  \item{nestfun}{Function to analyse nestedness. Some functions are
    provided in \pkg{vegan}, but any function can be used if it accepts the
    community as the first argument, and returns either a plain number or
    the result in list item with the name defined in argument
  \code{statistic}. See Examples for defining your own functions.}
  \item{method}{Null model method: either a name (character string) of
    a method defined in \code{\link{make.commsim}} or a
    \code{\link{commsim}} function. This argument is ignored if
    \code{comm} is a \code{\link{nullmodel}} or a \code{simmat}
    object. See Details and Examples.}
  \item{nsimul}{Number of simulated null communities (ignored if
    \code{comm} is a \code{simmat} object.}
  \item{burnin}{Number of null communities discarded before proper
    analysis in sequential methods \code{"swap"} and \code{"tswap"}
    (ignored with non-sequential methods or when \code{comm} is a
    \code{simmat} object.}
  \item{thin}{Number of discarded null communities between two
    evaluations of nestedness statistic in sequential methods
    \code{"swap"} and \code{"tswap"} (ignored with non-sequential
    methods or when \code{comm} is a \code{simmat} object.}
  \item{statistic}{The name of the statistic returned by
    \code{nestedfun}} 
  \item{alternative}{a character string specifying the alternative
    hypothesis, must be one of \code{"two.sided"} (default), \code{"greater"}
    or \code{"less"}. You can specify just the initial letter.}
  \item{x}{An \code{oecosimu} result object.}
  \item{data}{Ignored argument of the generic function.}
  \item{xlab}{Label of the x-axis.}
  \item{\dots}{Other arguments to functions.}
}

\details{
  
  Function \code{oecosimu} is a wrapper that evaluates a nestedness
  statistic using function given by \code{nestfun}, and then simulates
  a series of null models based on \code{nullmodel}, and evaluates the
  statistic on these null models. The \pkg{vegan} packages contains
  some nestedness functions that are described separately
  (\code{\link{nestedchecker}}, \code{\link{nesteddisc}},
  \code{\link{nestedn0}}, \code{\link{nestedtemp}}), but many other
  functions can be used as long as they are meaningful with binary or
  quantitative community models.  An applicable function must return
  either the statistic as a plain number, or as a list element
  \code{"statistic"} (like \code{\link{chisq.test}}), or in an item
  whose name is given in the argument \code{statistic}.  The statistic
  can be a single number (like typical for a nestedness index), or it
  can be a vector. The vector indices can be used to analyse site
  (row) or species (column) properties, see \code{\link{treedive}} for
  an example. Raup-Crick index (\code{\link{raupcrick}}) gives an
  example of using a dissimilarities index.

  Function \code{as.ts} transforms the simulated results of sequential
  methods into a time series or a \code{\link{ts}} object. This allows
  using analytic tools for time series in studying the sequences (see
  examples). Function \code{as.mcmc} transforms the simulated results
  of sequential methods into an \code{\link[coda]{mcmc}} object of the
  \pkg{coda} package. The \pkg{coda} package provides functions for
  the analysis of stationarity, adequacy of sample size,
  autocorrelation, need of burn-in and much more for sequential
  methods. Please consult the documentation of \pkg{coda} package.

  Function \code{density} provides an interface to the
  standard \code{\link{density}} function for the simulated
  values. Function \code{densityplot} is an interface to the
  \code{\link[lattice]{densityplot}} function of the \pkg{lattice}
  package. The \code{density} can be used meaningfully only for single
  statistics and must be plotted separately. The \code{densityplot}
  function can handle multiple statistics, and it plots the results
  directly. In addition to the density, the \code{densityplot} also
  shows the observed value of the statistic (provided it is within the
  graph limits). The \code{densityplot} function is defined as a
  generic function in the \pkg{lattice} package and you must either
  load the \pkg{lattice} library before calling \code{densityplot}, or
  use the longer form \code{densityplot.oecosimu} when you first time
  call the function.
}

\value{
  Function \code{oecosimu} returns the result of \code{nestfun}
  with one added component called \code{oecosimu}. The \code{oecosimu}
  component contains the simulated values of the statistic (item
  \code{simulated}), the name of the \code{method}, two-sided \eqn{P}
  value and z-value of the statistic based on simulation. The
  \code{commsimulator} returns a null model matrix or a swap of the
  input matrix.  }

\author{Jari Oksanen and Peter Solymos}

\note{
  
  Function \code{oecosimu} does not have default \code{nestfun} nor
  default \code{method}, because there is no clear natural choice. If
  you use these methods, you must be able to choose your own
  strategy. For description of canned null models and discussion, see
  \code{\link{commsim}}.  For canned nestedness functions see
  \code{\link{nestedtemp}} (which describes several functions).
  Although \code{oecosimu} is given in the Null model framework where
  nestedness is typically analysed, the function is not limited to
  study nestedness, but it is much more general (see Examples).

  If you wonder about the name of \code{oecosimu}, look at journal
  names in the References (and more in \code{\link{nestedtemp}}).  }

\seealso{Function \code{oecosimu} currently defines null models with
  \code{\link{commsim}} and generates the simulated null model
  communities with \code{\link{nullmodel}} and
  \code{\link{simulate.nullmodel}}.

  Function \code{\link[labdsv]{rndtaxa}}
  (\pkg{labdsv} package) randomizes a community table. See also
  \code{\link{nestedtemp}} (that also discusses other nestedness
  functions) and \code{\link{treedive}} for another application. 
}
\examples{
## Use the first eigenvalue of correspondence analysis as an index
## of structure: a model for making your own functions.
data(sipoo)
out <- oecosimu(sipoo, decorana, "swap", burnin=100, thin=10, statistic="evals")
out
## Inspect the swap sequence as a time series object
plot(as.ts(out))
lag.plot(as.ts(out))
acf(as.ts(out))
## Density plot: needs lattice
require(lattice)
densityplot(out, as.table = TRUE)
## Use quantitative null models to compare
## mean Bray-Curtis dissimilarities
data(dune)
meandist <- function(x) mean(vegdist(x, "bray"))
mbc1 <- oecosimu(dune, meandist, "r2dtable")
mbc1

## Define your own null model as a 'commsim' function: shuffle cells
## in each row
foo <- function(x, n, nr, nc, ...) {
   out <- array(0, c(nr, nc, n))
   for (k in seq_len(n))
      out[,,k] <- apply(x, 2, function(z) sample(z, length(z)))
   out
}
cf <- commsim("myshuffle", foo, isSeq = FALSE, binary = FALSE, mode = "double")
oecosimu(dune, meandist, cf)
}
\keyword{ multivariate }
\keyword{ datagen }


