\input texinfo
@c %**start of header
@setfilename FAQ-vegan.info
@settitle vegan FAQ
@setchapternewpage on
@set FAQ_YEAR 2007
@afourpaper
@c %**end of header

@copying
@ifnottex
This document contains answers to some of the most frequently asked
questions about R package vegan. 
This is version of $Date$.
@end ifnottex

@quotation
This work is licensed under the Creative Commons Attribution 3.0
License. To view a copy of this license, visit
@url{http://creativecommons.org/licenses/by/3.0/} or send a letter to
Creative Commons, 543 Howard Street, 5th Floor, San Francisco,
California, 94105, USA.

Copyright @copyright{} 2007 Jari Oksanen
@end quotation
@end copying

@dircategory Programming
@direntry
* R vegan FAQ: (FAQ-vegan).             FAQ for R package vegan.
@end direntry

@finalout

@titlepage
@title vegan @acronym{FAQ}
@subtitle Frequently Asked Questions on R package vegan
@subtitle Version of $Date$ 
@author Jari Oksanen

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnothtml
@contents
@end ifnothtml


@ifnottex
@node Top, Introduction, (dir), (dir)
@top vegan FAQ
@insertcopying
@end ifnottex




@menu
* Introduction::                
* Ordination::                  
* Other analysis methods ::     
@end menu

@node Introduction, Ordination, Top, Top
@chapter Introduction

@menu
* What is vegan?::              
* What is R?::                  
* How to obtain vegan and R?::  
* What R packages vegan depends on?::  
* What other packages are available for ecologists?::  
* What other documentation is available for vegan?::  
* Is there a Graphical User Inteface (GUI) for vegan?::  
* How to cite vegan?::          
* Version numbering in vegan::  
* How to build vegan from sources?::  
* Are there binaries for devel versions?::  
* How to report a bug in vegan?::  
* Can I contribute to vegan?::  
@end menu

@node What is vegan?, What is R?, Introduction, Introduction
@section What is vegan?

Vegan is an R package for community ecologists. It contains most
multivariate analysis needed in analysing ecological communities, and
tools for diversity analysis, and other potentially useful functions.
Vegan is not self-contained but it must be run under R statistical
environment, and it also depends on many other R packages. Vegan is
@url{http://www.gnu.org/philosophy/free-sw.html, free software} and
distributed under 
@url{http://www.gnu.org/licenses/gpl.html, ,GPL2 license}. 

@node What is R?, How to obtain vegan and R?, What is vegan?, Introduction
@section What is R?

R is a system for statistical computation and graphics.  It consists of
a language plus a run-time environment with graphics, a debugger, access
to certain system functions, and the ability to run programs stored in
script files.

R has a home page at @url{http://www.R-project.org/}.  It is
@url{http://www.gnu.org/philosophy/free-sw.html, free software}
distributed under a @acronym{GNU}-style
@url{http://www.gnu.org/copyleft/copyleft.html, copyleft}, and an
official part of the @url{http://www.gnu.org/, @acronym{GNU}} project
(``@acronym{GNU} S'').

@node How to obtain vegan and R?, What R packages vegan depends on?, What is R?, Introduction
@section How to obtain vegan and R?

Both R and latest release version of vegan can be obtained through
@url{http://cran.r-project.org,,CRAN}. Unstable development version of
vegan can be obtained through
@url{http://r-forge.r-project.org/projects/vegan/,,R-Forge}.



@node What R packages vegan depends on?, What other packages are available for ecologists?, How to obtain vegan and R?, Introduction
@section What R packages vegan depends on?

Some vegan functions depend on packages @code{MASS}, @code{mgcv},
@code{cluster} and @code{lattice}.  These all are recommended standard
R packages that should be available in every R installation.  In
addition, some vegan functions @code{require} non-standard R packages.
Vegan declares these packages only as suggested ones, and you can install vegan
and use most of its functions without these packages.  The
non-standard packages needed by some vegan functions are:
@itemize
@item Package @code{ellipse} 
is needed by @code{ordiellipse}

@item Package @code{scatterplot3d}
is needed by @code{ordiplot3d}

@item Package @code{rgl}
is needed by @code{ordirgl}

@end itemize

@node What other packages are available for ecologists?, What other documentation is available for vegan?, What R packages vegan depends on?, Introduction
@section What other packages are available for ecologists?

@acronym{CRAN} @url{http://cran.r-project.org/src/contrib/Views/,,Task
Views} include entries like @code{Environmetrics}, @code{Multivariate}
and @code{Spatial} that describe several useful packages and
functions.  If you install R package @code{ctv}, you can
inspect Task Views from your R session, and automatically install sets
of most important packages.

@node What other documentation is available for vegan?, Is there a Graphical User Inteface (GUI) for vegan?, What other packages are available for ecologists?, Introduction
@section What other documentation is available for vegan?

Vegan is a fully documented R package with standard help pages.  These
are the most authoritative sources of documentation.  Vegan package ships
with other documents which can be read with @code{vegandocs} command
(documented in the vegan help).  The documents included in the vegan
package are 
@itemize
@item 
Vegan ChangeLog.
@item 
Discussion on design decisions in vegan
@item
Description of variance partition procedures in function @code{varpart}.
@end itemize


Web documents outside the package include:
@itemize

@item
@url{http://cc.oulu.fi/~jarioksa/softhelp/vegan.html}: vegan homepage.
@item
@url{http://cc.oulu.fi/~jarioksa/opetus/metodi/vegantutor.pdf}: vegan
tutorial.

@item
@url{http://wiki.r-project.org/rwiki/doku.php?id=packages:cran:vegan,,http://wiki.r-project.org/}:
entry in R-Wiki.

@end itemize

@node Is there a Graphical User Inteface (GUI) for vegan?, How to cite vegan?, What other documentation is available for vegan?, Introduction
@section Is there a Graphical User Interface (GUI) for vegan?

Roeland Kindt has made package @code{BiodiversityR} which provides a
GUI for vegan. The package is available at 
@url{http://cran.r-project.org/src/contrib/Descriptions/BiodiversityR.html,,CRAN}.
It is not a mere GUI for vegan, but adds some new functions and
complements vegan functions in order to provide a 
workbench for biodiversity analysis. You can install @code{BiodiversityR} using
@code{install.packages("BiodiversityR")} or graphical package
management menu in R. The GUI works on Windows, MacOS X and Linux.

@node How to cite vegan?, Version numbering in vegan, Is there a Graphical User Inteface (GUI) for vegan?, Introduction
@section How to cite vegan? 

Use command @code{citation("vegan")} in R to see the recommended
citation to be used in publications. 

@node Version numbering in vegan, How to build vegan from sources?, How to cite vegan?, Introduction
@section Version numbering in vegan

From version 1.10-0, vegan is developed at
@url{http://r-forge.r-project.org/projects/vegan/,,R-Forge} and there
is a general progression of version numbers mixed with stable (at
@url{http://cran.r-project.org,,CRAN}) and devel versions (at 
@url{http://r-forge.r-project.org/projects/vegan/,,R-Forge}). 

Up to versions 1.8-7 and 1.9-34, vegan version numbers were of type
x.y-z, where number y is even for stable release versions at
@url{http://cran.r-project.org,,CRAN} and odd for unstable release
versions at @url{http://cc.oulu.fi/~jarioksa/softhelp/vegan.html,,my
personal homepage}. 

@node How to build vegan from sources?, Are there binaries for devel versions?, Version numbering in vegan, Introduction
@section How to build vegan from sources?

In general, you do not need to build vegan from sources, but binary
builds of release versions are available through
@url{http://cran.r-project.org/,,CRAN} for Windows and MacOS X. If
you use some other operating systems, or want to use unstable devel
versions, you may have to use source packages.
Vegan is a standard R package, and can be built like instructed in R
documentation.  Vegan contains source files in C and @acronym{FORTRAN},
and you need appropriate compilers (which may need more work in Windows
and MacOS X). 

@node Are there binaries for devel versions?, How to report a bug in vegan?, How to build vegan from sources?, Introduction
@section Are there binaries for devel versions?

@url{http://r-forge.r-project.org/projects/vegan/,,R-Forge} runs daily
tests on the devel package, and if passed, it builds source package and
Windows binaries. You can install those packages within R with command
@code{install.packages("vegan",
repos="http://r-forge.r-project.org/")}.  However, MacOS X binaries
are not available from R-Forge.

@node How to report a bug in vegan?, Can I contribute to vegan?, Are there binaries for devel versions?, Introduction
@section How to report a bug in vegan?

If you think you have found a bug in vegan, you should report it to me.
The bug report should be so detailed that I can correct the bug.  To
correct a bug, I should be able to reproduce the buggy behaviour.
Preferably, you should send me an example that causes a bug.  If it
needs a data set that is not available in R, you should send me minimal
data set as well. You also should paste the output or error message in
your message.  You also should tell me which version of vegan you used.

Bug reports are welcome: they are the only way to make vegan non-buggy.

Please note that you shall not send bug reports to R mailing lists,
since vegan is not a standard R package.

There also is a bug reporting tool at
@url{http://r-forge.r-project.org/projects/vegan/,,R-Forge}. 

@node Can I contribute to vegan?,  , How to report a bug in vegan?, Introduction
@section Can I contribute to vegan?

Vegan is dependent on user contribution.  All feedback is welcome.  If
you have problem with vegan, it may be as simple as incomplete
documentation, and I'll do my best to improve the documents.

Feature requests also are welcome, but they are not necessarily
fulfilled.  A new feature will be added if it is easy to do and it looks
useful to me or in general.  

Contributed code and functions are welcome and more certain to be
included than mere requests.  However, not all functions will be added,
but I must judge them to be suitable for vegan.  I also audit the code,
and  typically I edit the code in vegan style for easier maintenance.
All included contributions will be credited.  You can easily see that
many vegan functions were contributed by other people, and they are
listed as authors in the documentation. 

@node Ordination, Other analysis methods , Introduction, Top
@chapter Ordination

@menu
* Can you analyse binary or cover class data?::  
* Why dissimilarities in vegan differ from other sources?::  
* Zero dissimilarities in isoMDS::  
* Variance explained by ordination axes::  
* Class variables and dummies::  
* I want to use Helmert or sum constrasts::  
* What are aliased variables and how to see them?::  
* Plotting aliased variables::  
* Constrained permutations in vegan::  
@end menu

@node Can you analyse binary or cover class data?, Why dissimilarities in vegan differ from other sources?, Ordination, Ordination
@section Can you analyse binary or cover class data?

Yes. Most vegan methods can handle binary data or cover abundance data.
Most statistical tests are based on permutation, and do not make
distributional assumptions.  There are some methods (mainly in diversity
analysis) that need count data.  These methods check that input data are
integers, but they may be fooled by cover class data.

@node Why dissimilarities in vegan differ from other sources?, Zero dissimilarities in isoMDS, Can you analyse binary or cover class data?, Ordination
@section Why dissimilarities in vegan differ from other sources?

Most commonly the reason is that other software use presence--absence
data whereas vegan used quantitative data.  Usually vegan indices are
quantitative, but you can use argument @code{binary = TRUE} to make them
presence--absence.  However, the index name is the same in both cases,
although different names usually occur in literature.  For instance,
Jaccard index actually refers to the binary index, but vegan uses
name @code{"jaccard"} for the quantitative index, too.

Another reason may be that indices indeed are defined differently,
because people use same names for different indices.

@node Zero dissimilarities in isoMDS, Variance explained by ordination axes, Why dissimilarities in vegan differ from other sources?, Ordination
@section Zero dissimilarities in isoMDS

You can use argument @code{zerodist = "add"} in @code{metaMDS} or
@code{metaMDSdist} to handle zero dissimilarities.  With this argument,
zero dissimilarities are replace with a small above zero value, and they
can be handled in @code{isoMDS}.  This is a kluge, and some people do
not like this. A more principal solution is to remove duplicate sites
using R command @code{unique}.  However, after some standardizations or
with some dissimilarity indices, originally non-unique sites can have
zero dissimilarity, and you have to resort to the kluge (or work
harder with your data).

@node Variance explained by ordination axes, Class variables and dummies, Zero dissimilarities in isoMDS, Ordination
@section Variance explained by ordination axes.

In general, vegan does not directly give any statistics on the
``variance explained'' by ordination axes or by the constrained axes.
This is a design decision: I think this information is normally useless
and often misleading.  In community ordination, the goal typically is
not to explain the variance, but to find the ``gradients'' or main
trends in the data.  The ``total variation'' often is meaningless, and
all proportions of meaningless values also are meaningless.  Often a
better solution explains a smaller part of ``total variation''.  For
instance, in unstandardized principal components analysis most of the
variance is generated by a small number of most abundant species, and
they are easy to ``explain'' because data really are not very
multivariate.  If you standardize your data, all species are equally
important.  The first axes explains much less of the ``total
variation'', but now they explain all species equally, and results
typically are much more useful for the whole community.  Correspondence
analysis uses another measure of variation (which is not variance), and
again it typically explains a ``smaller proportion'' with a better
result.  Detrended correspondence analysis and nonmetric
multidimensional scaling even do not try to ``explain'' the variation,
but use other criteria.  All methods are incommensurable, and it is
impossible to compare methods using ``explanation of variation''.

If you still want to get ``explanation of variation'' (or a deranged
editor requests that from you), it is possible to get this information
for some methods:
@itemize
@item Eigenvector methods:
Functions @code{rda}, @code{cca} and @code{capscale} give the variation
of conditional (partialled), constrained (canonical) and residual
components, but you must calculate the proportions by hand. The
@code{summary} gives the contributions of the axes. 
Function @code{goodness} gives the same statistics for individual
species or sites (species are unavailable with @code{capscale}). In
addition, there is a special function 
@code{varpart} for unbiased partitioning of variance between up to four
separate components in redundancy analysis.

@item Detrended correspondence analysis (function @code{decorana}).
The total amount of variation is unknown and undefined in detrended
correspondence analysis, and therefore proportions from total also are
unknown and undefined.  @acronym{DCA} is not a method for
decomposition of variation, and therefore these proportions would not
make sense either. 

@item Nonmetric multidimensional scaling. 
@acronym{NMDS} is a method for nonlinear mapping, and the concept of
of variation explained does not make sense.  However, 1 - stress^2
transforms nonlinear stress into quantity analogous to squared
correlation coefficient.  Function @code{stressplot} displays the
nonlinear fit and gives this statistic.

@end itemize

@node Class variables and dummies, I want to use Helmert or sum constrasts, Variance explained by ordination axes, Ordination
@section Class variables and dummies

You should define a class variable as R @code{factor}, and vegan will
automatically handle them with formula interface.  You also can define
constrained ordination without formula interface, but then you must
code your class variables by hand.

R (and vegan) knows both unordered and ordered factors.  Unordered
factors are internally coded as dummy variables, but one redundant
level is removed or aliased.  With default contrasts, the removed
level is the first one.  Ordered factors are expressed as polynomial
contrasts. Both of these contrasts explained in standard R
documentation. 

You should never make your own dummy variables, but you should use
standard R factors.  R will internally change these factors into
dummies in a consistent and correct way.

@node I want to use Helmert or sum constrasts, What are aliased variables and how to see them?, Class variables and dummies, Ordination
@section I want to use Helmert or sum constrasts

@code{vegan} uses standard @code{R} utilities for defining
contrasts. The default in standard installations is to use treatment
contrasts, but you can change the behavious gloablly setting
@code{options} or locally by using keyword @code{contrasts}. Please
check the @code{R} help pages and user manuals for details.

@node What are aliased variables and how to see them?, Plotting aliased variables, I want to use Helmert or sum constrasts, Ordination
@section What are aliased variables and how to see them?

Aliased variable has no information because it can be expressed with
the help of other variables.  Such variables are automatically removed
in constrained ordination in vegan.  The aliased variables can be
redundant levels of factors or whole variables.

Vegan function @code{alias} gives the defining equations for aliased
variables.  If you only want to see the names of aliased variables or
levels in solution @code{sol}, write @code{sol$CCA$alias}.

@node Plotting aliased variables, Constrained permutations in vegan, What are aliased variables and how to see them?, Ordination
@section Plotting aliased variables

You can fit vectors or class centroids for aliased variables using
@code{envfit} function.  The @code{envfit} function uses weighted
fitting, and the fitted vectors are identical to the vectors in
correspondence analysis.

@node Constrained permutations in vegan,  , Plotting aliased variables, Ordination
@section Constrained permutations in vegan

You can constrain your permutations within @code{strata} or levels of
factors. You can use stratified permutations in all @code{vegan}
functions that use permutation, such as @code{adonis}, @code{anosim},
@code{anova.cca}, @code{mantel}, @code{mrpp}, @code{envfit} and
@code{protest}.

Other constrained permutations types are not (yet) available, but I am
happy to accept contribution. If you want to write code for other
permutation types, please contact me first so that we can discuss the
application interface.

@node Other analysis methods ,  , Ordination, Top
@chapter Other analysis methods

@menu
* Is there TWINSPAN?::          
* How is deviance calculated?::  
@end menu

@node Is there TWINSPAN?, How is deviance calculated?, Other analysis methods , Other analysis methods
@section Is there TWINSPAN

No.  It may be possible to port @acronym{TWINSPAN} to vegan, but it is
not among my top priorities.  If anybody wants to try porting,  I will
be happy to help.  @acronym{TWINSPAN} has a very permissive license,
and it would be completely legal to port the function into R.

@node How is deviance calculated?,  , Is there TWINSPAN?, Other analysis methods
@section How is deviance calculated?

Some vegan functions, such as @code{radfit} use base R facility of
@code{family} in maximum likelihood estimation.  This allows use of
several alternative error distributions, among them @code{"poisson"}
and @code{"gaussian"}. The R @code{family} also defines the
deviance.  You can see the equations for deviance with commands like
@code{poisson()$dev} or @code{gaussian()$dev}.  

In general, deviance is 2 times log.likelihood 
shifted so that models with exact fit have zero deviance.


@bye
